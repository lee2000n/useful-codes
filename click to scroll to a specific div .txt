<style>
    .haha
    {
    color:#60754c;
    }
    .haha:hover
    {
    background-color:#eee;
    }
</style>
<script>
$('#map_canvas').click(function() {

if ($('.service-item--selected').length)
{
var $container = $(".service-col");
var $scrollTo = $('.service-item--selected');
$scrollTo.removeClass('service-item').addClass('haha');
var hh=$('.service-item');
hh.hide();
$('.haha').show();
}

else
{
hh.show();
$('.haha').show();
}
});

</script>

<div id="searches" style="font-size: 10px;">Please narrow the result by the first 3 postal code.
<input id="search-weeazer" style="width: 50px; height: 12px;" />
<span id="noresult" style="color: #c60707;"></span></div>
<script>

    $("#search-weeazer").keyup(function(){
  var filter = $(this).val(), count = 0;
        // Retrieve the input field text and reset the count to zero
        var filter = $(this).val(), count = 0;
 
        // Loop through the comment list
        $('.service-col .service-item,.service-col .haha').each(function(){
 
            // If the list item does not contain the text phrase fade it out
            if ($(this).text().search(new RegExp(filter, "i"))<0) {
           
$(this).fadeOut();



            // Show the list item if the phrase matches and increase the count by 1
            } 
else {

                $(this).show();
                count++;

            }
        });
 
        // Update the count
      var numberItems = count;
if(count==0)
{
$("#noresult").text("No result");
}
else if(count==$('.service-col .service-item').length+$('.service-col .haha').length)
{
$("#noresult").text("");
}
else{
        $("#noresult").text("Number of results = "+count);
       }
    });

$('.service-col').find($('.schoolColor')).append($('#searches'));

</script>
<script>
$(function() {
    $('#search-weeazer').bind('keyup change', function(ev) {
        // pull in the new value
        var searchTerm = $(this).val();

        // remove any old highlighted terms
        $('.service-col .service-item').removeHighlight();
$('.service-col .haha').removeHighlight();
        // disable highlighting if empty
        if ( searchTerm ) {
            // highlight the new term
            $('.service-col .service-item').highlight( searchTerm );
$('.service-col .haha').highlight( searchTerm );
        }
    });
});

jQuery.fn.highlight = function(pat) {
 function innerHighlight(node, pat) {
  var skip = 0;
  if (node.nodeType == 3) {
   var pos = node.data.toUpperCase().indexOf(pat);
   if (pos >-1) {
    var spannode = document.createElement('span');
    spannode.className = 'highlight';
    var middlebit = node.splitText(pos);
    var endbit = middlebit.splitText(pat.length);
    var middleclone = middlebit.cloneNode(true);
    spannode.appendChild(middleclone);
    middlebit.parentNode.replaceChild(spannode, middlebit);
    skip = 1;
   }
  }
  else if (node.nodeType == 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {
   for (var i = 0; i <node.childNodes.length; ++i) {
    i += innerHighlight(node.childNodes[i], pat);
   }
  }
  return skip;
 }
 return this.each(function() {
  innerHighlight(this, pat.toUpperCase());
 });
};

jQuery.fn.removeHighlight = function() {
 function newNormalize(node) {
    for (var i = 0, children = node.childNodes, nodeCount = children.length; i <nodeCount; i++) {
        var child = children[i];
        if (child.nodeType == 1) {
            newNormalize(child);
            continue;
        }
        if (child.nodeType != 3) { continue; }
        var next = child.nextSibling;
        if (next == null || next.nodeType != 3) { continue; }
        var combined_text = child.nodeValue + next.nodeValue;
        new_node = node.ownerDocument.createTextNode(combined_text);
        node.insertBefore(new_node, child);
        node.removeChild(child);
        node.removeChild(next);
        i--;
        nodeCount--;
    }
 }

 return this.find("span.highlight").each(function() {
    var thisParent = this.parentNode;
    thisParent.replaceChild(this.firstChild, this);
    newNormalize(thisParent);
 }).end();
};
</script>
